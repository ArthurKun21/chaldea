import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';

// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
class S implements WidgetsLocalizations {
  const S();

  static S current;

  static const GeneratedLocalizationsDelegate delegate =
    GeneratedLocalizationsDelegate();

  static S of(BuildContext context) => Localizations.of<S>(context, S);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  String get backup => "Backup to ...";
  String get backup_restore => "Backup & Restore";
  String get cancel => "Cancel";
  String get cmd_code_title => "Command Code";
  String get craft_essential => "Craft Essential";
  String get cur_account => "Current Account";
  String get delete => "Delete";
  String get drop_calculator => "Drop Calc";
  String get edit => "Edit";
  String get event_title => "Event";
  String get gallery_tab_name => "Home";
  String get hello => "Hello！";
  String get input_error => "Invalid input value.";
  String get item_title => "Item";
  String get language => "English";
  String get more => "More";
  String get new_account => "New account";
  String get ok => "OK";
  String get rename => "Rename";
  String get restore => "Restore";
  String get servant => "Servant";
  String get servant_title => "Servant";
  String get server => "Server";
  String get server_cn => "CN";
  String get server_jp => "JP";
  String get settings_data => "Data";
  String get settings_general => "General";
  String get settings_language => "Language";
  String get settings_tab_name => "Settings";
  String get settings_tutorial => "Tutorial";
}

class $zh_TW extends S {
  const $zh_TW();

  @override
  TextDirection get textDirection => TextDirection.ltr;

  @override
  String get cancel => "Cancel";
  @override
  String get server => "Server";
  @override
  String get backup => "Backup to ...";
  @override
  String get language => "繁體中文";
  @override
  String get delete => "Delete";
  @override
  String get servant => "從者";
  @override
  String get ok => "OK";
  @override
  String get server_cn => "CN";
  @override
  String get item_title => "Items";
  @override
  String get gallery_tab_name => "首頁";
  @override
  String get restore => "Restore";
  @override
  String get edit => "Edit";
  @override
  String get settings_general => "通用";
  @override
  String get settings_language => "語言";
  @override
  String get more => "More";
  @override
  String get event_title => "Events";
  @override
  String get settings_data => "數據";
  @override
  String get cur_account => "當前賬號";
  @override
  String get craft_essential => "概念禮裝";
  @override
  String get rename => "Rename";
  @override
  String get input_error => "Invalid input value.";
  @override
  String get server_jp => "JP";
  @override
  String get hello => "你好！";
  @override
  String get servant_title => "Servant";
  @override
  String get settings_tab_name => "設置";
  @override
  String get settings_tutorial => "使用幫助";
  @override
  String get new_account => "New account";
}

class $ja extends S {
  const $ja();

  @override
  TextDirection get textDirection => TextDirection.ltr;

  @override
  String get cancel => "Cancel";
  @override
  String get server => "Server";
  @override
  String get backup => "Backup to ...";
  @override
  String get language => "日本語";
  @override
  String get delete => "Delete";
  @override
  String get servant => "サーバント";
  @override
  String get ok => "OK";
  @override
  String get server_cn => "CN";
  @override
  String get item_title => "Items";
  @override
  String get gallery_tab_name => "ホーム";
  @override
  String get restore => "Restore";
  @override
  String get edit => "Edit";
  @override
  String get settings_general => "一般";
  @override
  String get settings_language => "言語";
  @override
  String get more => "More";
  @override
  String get event_title => "Events";
  @override
  String get settings_data => "データ";
  @override
  String get cur_account => "アカウント";
  @override
  String get craft_essential => "概念礼装";
  @override
  String get rename => "Rename";
  @override
  String get input_error => "Invalid input value.";
  @override
  String get server_jp => "JP";
  @override
  String get hello => "こんにちは。";
  @override
  String get servant_title => "Servant";
  @override
  String get settings_tab_name => "設定";
  @override
  String get settings_tutorial => "ヘルプ";
  @override
  String get new_account => "New account";
}

class $en extends S {
  const $en();
}

class $zh extends S {
  const $zh();

  @override
  TextDirection get textDirection => TextDirection.ltr;

  @override
  String get cancel => "取消";
  @override
  String get server => "服务器";
  @override
  String get backup => "Backup to ...";
  @override
  String get language => "简体中文";
  @override
  String get delete => "删除";
  @override
  String get drop_calculator => "掉落速查";
  @override
  String get servant => "从者";
  @override
  String get ok => "确定";
  @override
  String get server_cn => "国服";
  @override
  String get item_title => "素材";
  @override
  String get gallery_tab_name => "首页";
  @override
  String get restore => "Restore";
  @override
  String get edit => "Edit";
  @override
  String get settings_general => "通用";
  @override
  String get settings_language => "语言";
  @override
  String get more => "更多";
  @override
  String get event_title => "活动";
  @override
  String get settings_data => "数据";
  @override
  String get cur_account => "当前账号";
  @override
  String get craft_essential => "概念礼装";
  @override
  String get cmd_code_title => "纹章";
  @override
  String get rename => "重命名";
  @override
  String get input_error => "无效输入值";
  @override
  String get server_jp => "日服";
  @override
  String get hello => "你好！Master!";
  @override
  String get servant_title => "从者";
  @override
  String get settings_tab_name => "设置";
  @override
  String get settings_tutorial => "使用帮助";
  @override
  String get new_account => "新建账号";
}

class GeneratedLocalizationsDelegate extends LocalizationsDelegate<S> {
  const GeneratedLocalizationsDelegate();

  List<Locale> get supportedLocales {
    return const <Locale>[
      Locale("zh", "TW"),
      Locale("ja", ""),
      Locale("en", ""),
      Locale("zh", ""),
    ];
  }

  LocaleListResolutionCallback listResolution({Locale fallback, bool withCountry = true}) {
    return (List<Locale> locales, Iterable<Locale> supported) {
      if (locales == null || locales.isEmpty) {
        return fallback ?? supported.first;
      } else {
        return _resolve(locales.first, fallback, supported, withCountry);
      }
    };
  }

  LocaleResolutionCallback resolution({Locale fallback, bool withCountry = true}) {
    return (Locale locale, Iterable<Locale> supported) {
      return _resolve(locale, fallback, supported, withCountry);
    };
  }

  @override
  Future<S> load(Locale locale) {
    final String lang = getLang(locale);
    if (lang != null) {
      switch (lang) {
        case "zh_TW":
          S.current = const $zh_TW();
          return SynchronousFuture<S>(S.current);
        case "ja":
          S.current = const $ja();
          return SynchronousFuture<S>(S.current);
        case "en":
          S.current = const $en();
          return SynchronousFuture<S>(S.current);
        case "zh":
          S.current = const $zh();
          return SynchronousFuture<S>(S.current);
        default:
          // NO-OP.
      }
    }
    S.current = const S();
    return SynchronousFuture<S>(S.current);
  }

  @override
  bool isSupported(Locale locale) => _isSupported(locale, true);

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => false;

  ///
  /// Internal method to resolve a locale from a list of locales.
  ///
  Locale _resolve(Locale locale, Locale fallback, Iterable<Locale> supported, bool withCountry) {
    if (locale == null || !_isSupported(locale, withCountry)) {
      return fallback ?? supported.first;
    }

    final Locale languageLocale = Locale(locale.languageCode, "");
    if (supported.contains(locale)) {
      return locale;
    } else if (supported.contains(languageLocale)) {
      return languageLocale;
    } else {
      final Locale fallbackLocale = fallback ?? supported.first;
      return fallbackLocale;
    }
  }

  ///
  /// Returns true if the specified locale is supported, false otherwise.
  ///
  bool _isSupported(Locale locale, bool withCountry) {
    if (locale != null) {
      for (Locale supportedLocale in supportedLocales) {
        // Language must always match both locales.
        if (supportedLocale.languageCode != locale.languageCode) {
          continue;
        }

        // If country code matches, return this locale.
        if (supportedLocale.countryCode == locale.countryCode) {
          return true;
        }

        // If no country requirement is requested, check if this locale has no country.
        if (true != withCountry && (supportedLocale.countryCode == null || supportedLocale.countryCode.isEmpty)) {
          return true;
        }
      }
    }
    return false;
  }
}

String getLang(Locale l) => l == null
  ? null
  : l.countryCode != null && l.countryCode.isEmpty
    ? l.languageCode
    : l.toString();
