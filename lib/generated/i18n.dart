
import 'dart:async';

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

//This file is automatically generated. DO NOT EDIT, all your changes would be lost.

class S implements WidgetsLocalizations {
  const S();

  static const GeneratedLocalizationsDelegate delegate =
      const GeneratedLocalizationsDelegate();

  static S of(BuildContext context) =>
      Localizations.of<S>(context, WidgetsLocalizations);

  @override
  TextDirection get textDirection => TextDirection.ltr;

  String get backup => "Backup to ...";
  String get backup_restore => "Backup & Restore";
  String get cancel => "Cancel";
  String get cur_account => "Current Account";
  String get delete => "Delete";
  String get edit => "Edit";
  String get gallery_tab_name => "Home";
  String get hello => "Hello！";
  String get input_error => "Invalid input value.";
  String get item_title => "Items";
  String get language => "eng";
  String get more => "More";
  String get new_account => "New account";
  String get ok => "OK";
  String get rename => "Rename";
  String get restore => "Restore";
  String get servant_title => "Servant";
  String get server => "Server";
  String get server_cn => "CN";
  String get server_jp => "JP";
  String get settings_data => "Data";
  String get settings_general => "General";
  String get settings_language => "Language";
  String get settings_tab_name => "Settings";
  String get settings_tutorial => "Tutorial";
}

class zh_TW extends S {
  const zh_TW();

   @override
  TextDirection get textDirection => TextDirection.ltr;

  @override
  String get gallery_tab_name => "首頁";
  @override
  String get cancel => "Cancel";
  @override
  String get server => "Server";
  @override
  String get backup => "Backup to ...";
  @override
  String get restore => "Restore";
  @override
  String get edit => "Edit";
  @override
  String get settings_general => "通用";
  @override
  String get settings_language => "語言";
  @override
  String get more => "More";
  @override
  String get language => "cht";
  @override
  String get delete => "Delete";
  @override
  String get settings_data => "數據";
  @override
  String get cur_account => "當前賬號";
  @override
  String get rename => "Rename";
  @override
  String get input_error => "Invalid input value.";
  @override
  String get server_jp => "JP";
  @override
  String get hello => "你好！";
  @override
  String get ok => "OK";
  @override
  String get server_cn => "CN";
  @override
  String get servant_title => "Servant";
  @override
  String get item_title => "Items";
  @override
  String get settings_tab_name => "設置";
  @override
  String get settings_tutorial => "使用幫助";
  @override
  String get new_account => "New account";
}

class ja extends S {
  const ja();

   @override
  TextDirection get textDirection => TextDirection.ltr;

  @override
  String get gallery_tab_name => "ホーム";
  @override
  String get cancel => "Cancel";
  @override
  String get server => "Server";
  @override
  String get backup => "Backup to ...";
  @override
  String get restore => "Restore";
  @override
  String get edit => "Edit";
  @override
  String get settings_general => "一般";
  @override
  String get settings_language => "言語";
  @override
  String get more => "More";
  @override
  String get language => "jpn";
  @override
  String get delete => "Delete";
  @override
  String get settings_data => "データ";
  @override
  String get cur_account => "アカウント";
  @override
  String get rename => "Rename";
  @override
  String get input_error => "Invalid input value.";
  @override
  String get server_jp => "JP";
  @override
  String get hello => "こんにちは。";
  @override
  String get ok => "OK";
  @override
  String get server_cn => "CN";
  @override
  String get servant_title => "Servant";
  @override
  String get item_title => "Items";
  @override
  String get settings_tab_name => "設定";
  @override
  String get settings_tutorial => "ヘルプ";
  @override
  String get new_account => "New account";
}

class en extends S {
  const en();
}

class zh extends S {
  const zh();

   @override
  TextDirection get textDirection => TextDirection.ltr;

  @override
  String get gallery_tab_name => "首页";
  @override
  String get cancel => "Cancel";
  @override
  String get server => "Server";
  @override
  String get backup => "Backup to ...";
  @override
  String get restore => "Restore";
  @override
  String get edit => "Edit";
  @override
  String get settings_general => "通用";
  @override
  String get settings_language => "语言";
  @override
  String get more => "More";
  @override
  String get language => "chs";
  @override
  String get delete => "Delete";
  @override
  String get settings_data => "数据";
  @override
  String get cur_account => "当前账号";
  @override
  String get rename => "Rename";
  @override
  String get input_error => "Invalid input value.";
  @override
  String get server_jp => "JP";
  @override
  String get hello => "你好！";
  @override
  String get ok => "OK";
  @override
  String get server_cn => "CN";
  @override
  String get servant_title => "Servant";
  @override
  String get item_title => "Items";
  @override
  String get settings_tab_name => "设置";
  @override
  String get settings_tutorial => "使用帮助";
  @override
  String get new_account => "New account";
}


class GeneratedLocalizationsDelegate extends LocalizationsDelegate<WidgetsLocalizations> {
  const GeneratedLocalizationsDelegate();

  List<Locale> get supportedLocales {
    return const <Locale>[

      const Locale("zh", "TW"),
      const Locale("ja", ""),
      const Locale("en", ""),
      const Locale("zh", ""),

    ];
  }

  LocaleResolutionCallback resolution({Locale fallback}) {
    return (Locale locale, Iterable<Locale> supported) {
      final Locale languageLocale = new Locale(locale.languageCode, "");
      if (supported.contains(locale))
        return locale;
      else if (supported.contains(languageLocale))
        return languageLocale;
      else {
        final Locale fallbackLocale = fallback ?? supported.first;
        return fallbackLocale;
      }
    };
  }

  @override
  Future<WidgetsLocalizations> load(Locale locale) {
    final String lang = getLang(locale);
    switch (lang) {

      case "zh_TW":
        return new SynchronousFuture<WidgetsLocalizations>(const zh_TW());
      case "ja":
        return new SynchronousFuture<WidgetsLocalizations>(const ja());
      case "en":
        return new SynchronousFuture<WidgetsLocalizations>(const en());
      case "zh":
        return new SynchronousFuture<WidgetsLocalizations>(const zh());

      default:
        return new SynchronousFuture<WidgetsLocalizations>(const S());
    }
  }

  @override
  bool isSupported(Locale locale) => supportedLocales.contains(locale);

  @override
  bool shouldReload(GeneratedLocalizationsDelegate old) => false;
}

String getLang(Locale l) => l.countryCode != null && l.countryCode.isEmpty
    ? l.languageCode
    : l.toString();
